// üéµ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
const sounds = {
    // üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á UI ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° (‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°, ‡∏ä‡∏ô‡∏∞, ‡πÅ‡∏û‡πâ ‡∏Ø‡∏•‡∏Ø)
    click: new Audio('public/sounds/fx/click.ogg'),
    gameOver: new Audio('public/sounds/fx/game_over.ogg'),
    lose: new Audio('public/sounds/fx/lose.ogg'),
    win: new Audio('public/sounds/fx/win.ogg'),
    score: new Audio('public/sounds/fx/score.ogg'),
    score2: new Audio('public/sounds/fx/score2.ogg'),

    // ‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    menuMusic: new Audio('public/sounds/music/pikachu_beach.ogg'),
    battleMusic: new Audio('public/sounds/music/classic_battle.ogg'),
    townMusic: new Audio('public/sounds/music/fallarbor_town.ogg'),
    jumpMusic: new Audio('public/sounds/music/pokemon_jump.ogg')
};

// üîÅ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
sounds.menuMusic.loop = true;
sounds.battleMusic.loop = true;
sounds.townMusic.loop = true;
sounds.jumpMusic.loop = true;

// üîâ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏∞‡πÄ‡∏ö‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå)
Object.keys(sounds).forEach(key => {
    if (key.includes('Music')) {
        sounds[key].volume = 0.3; // ‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    } else {
        sounds[key].volume = 0.7; // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    }
});

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
let currentMusic = null;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function playSound(soundName) {
    try {
        if (sounds[soundName]) {
            sounds[soundName].currentTime = 0;
            sounds[soundName].play();
        }
    } catch (e) {
        console.log('Sound play failed:', e);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà)
function playMusic(musicName, fade = false) {
    try {
        // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
        if (currentMusic && currentMusic !== sounds[musicName]) {
            currentMusic.pause();
            currentMusic.currentTime = 0;
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà
        if (sounds[musicName]) {
            currentMusic = sounds[musicName];
            currentMusic.play();
        }
    } catch (e) {
        console.log('Music play failed:', e);
    }
}

function stopMusic() {
    if (currentMusic) {
        currentMusic.pause();
        currentMusic.currentTime = 0;
        currentMusic = null;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ (‡πÄ‡∏™‡∏µ‡∏¢‡∏á score/score2)
function playRandomBattleSound() {
    const battleSounds = ['score', 'score2'];
    const randomSound = battleSounds[Math.floor(Math.random() * battleSounds.length)];
    playSound(randomSound);
}

// ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
let soundEnabled = true;

function toggleSound() {
    soundEnabled = !soundEnabled;
    const toggleBtn = document.getElementById('soundToggle');

    if (soundEnabled) {
        toggleBtn.textContent = 'üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡πÄ‡∏õ‡∏¥‡∏î';
        toggleBtn.classList.remove('muted');
        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
        if (currentMusic) {
            currentMusic.play();
        }
    } else {
        toggleBtn.textContent = 'üîá ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏õ‡∏¥‡∏î';
        toggleBtn.classList.add('muted');
        // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        stopMusic();
        Object.values(sounds).forEach(sound => {
            sound.pause();
        });
    }
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á/‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
const originalPlaySound = playSound;
const originalPlayMusic = playMusic;

playSound = function(soundName) {
    if (soundEnabled) {
        originalPlaySound(soundName);
    }
};

playMusic = function(musicName, fade = false) {
    if (soundEnabled) {
        originalPlayMusic(musicName, fade);
    }
};

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡πÄ‡∏Å‡∏°‡∏≠‡∏ô (HP, ‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ, ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô, ‡∏ó‡πà‡∏≤‡πÇ‡∏à‡∏°‡∏ï‡∏µ)
const pokemonData = {
    bulbasaur: {
        name: "Bulbasaur",
        maxHp: 45,
        hp: 45,
        attack: 49,
        defense: 49,
        sprite: "public/images/effects/bulba_jump.gif",
        attacks: [
            { name: "Tackle", power: 40, type: "normal" },
            { name: "Vine Whip", power: 45, type: "grass" },
            { name: "Razor Leaf", power: 55, type: "grass" },
            { name: "Growl", power: 0, type: "normal", effect: "lower-attack" }
        ]
    },
    charmander: {
        name: "Charmander",
        maxHp: 39,
        hp: 39,
        attack: 52,
        defense: 43,
        sprite: "public/images/effects/charmander.gif",
        attacks: [
            { name: "Scratch", power: 40, type: "normal" },
            { name: "Ember", power: 40, type: "fire" },
            { name: "Flamethrower", power: 90, type: "fire" },
            { name: "Growl", power: 0, type: "normal", effect: "lower-attack" }
        ]
    },
    squirtle: {
        name: "Squirtle",
        maxHp: 44,
        hp: 44,
        attack: 48,
        defense: 65,
        sprite: "public/images/effects/blastoise.gif",
        attacks: [
            { name: "Tackle", power: 40, type: "normal" },
            { name: "Water Gun", power: 40, type: "water" },
            { name: "Hydro Pump", power: 110, type: "water" },
            { name: "Tail Whip", power: 0, type: "normal", effect: "lower-defense" }
        ]
    },
    pikachu: {
        name: "Pikachu",
        maxHp: 35,
        hp: 35,
        attack: 55,
        defense: 40,
        sprite: "public/images/effects/pika_idle.gif",
        attacks: [
            { name: "Thunder Shock", power: 40, type: "electric" },
            { name: "Quick Attack", power: 40, type: "normal" },
            { name: "Thunderbolt", power: 90, type: "electric" },
            { name: "Tail Whip", power: 0, type: "normal", effect: "lower-defense" }
        ]
    }
};

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (‡πÇ‡∏õ‡πÄ‡∏Å‡∏°‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô, ‡∏®‡∏±‡∏ï‡∏£‡∏π, ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô, ‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
let gameState = {
    playerPokemon: JSON.parse(JSON.stringify(pokemonData.bulbasaur)),
    enemyPokemon: JSON.parse(JSON.stringify(pokemonData.pikachu)),
    currentTurn: "player",
    battleEnded: false
};

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö/‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏Ç‡∏≠‡∏á‡∏ò‡∏≤‡∏ï‡∏∏ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏ä‡∏ô‡∏∞‡πÑ‡∏ü, ‡πÑ‡∏ü‡πÅ‡∏û‡πâ‡∏ô‡πâ‡∏≥)
const typeChart = {
    fire: { grass: 2, water: 0.5, fire: 0.5 },
    water: { fire: 2, grass: 0.5, water: 0.5 },
    grass: { water: 2, fire: 0.5, grass: 0.5 },
    electric: { water: 2, grass: 0.5, electric: 0.5 },
    normal: {}
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏° (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
function initGame() {
    updateDisplay();
    updateMessage("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!");
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (‡∏ä‡∏∑‡πà‡∏≠, HP, ‡∏£‡∏π‡∏õ, ‡πÅ‡∏ñ‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï)
function updateDisplay() {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Pok√©mon ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    document.getElementById('player-name').textContent = gameState.playerPokemon.name;
    document.getElementById('player-hp').textContent = `${gameState.playerPokemon.hp}/${gameState.playerPokemon.maxHp}`;
    document.getElementById('player-sprite').src = gameState.playerPokemon.sprite;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Pok√©mon ‡∏Ç‡∏≠‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π
    document.getElementById('enemy-name').textContent = gameState.enemyPokemon.name;
    document.getElementById('enemy-hp').textContent = `${gameState.enemyPokemon.hp}/${gameState.enemyPokemon.maxHp}`;
    document.getElementById('enemy-sprite').src = gameState.enemyPokemon.sprite;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
    updateHealthBar('player');
    updateHealthBar('enemy');

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
    updateAttackMenu();
}

function updateHealthBar(target) {
    const pokemon = target === 'player' ? gameState.playerPokemon : gameState.enemyPokemon;
    const healthBar = document.getElementById(`${target}-health`);
    const healthPercentage = (pokemon.hp / pokemon.maxHp) * 100;

    healthBar.style.width = healthPercentage + '%';

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
    healthBar.classList.remove('low', 'critical');
    if (healthPercentage <= 20) {
        healthBar.classList.add('critical');
    } else if (healthPercentage <= 50) {
        healthBar.classList.add('low');
    }
}

function updateAttackMenu() {
    const attackMenu = document.getElementById('attack-menu');
    const attackButtons = attackMenu.querySelectorAll('.attack-btn:not(:last-child)');

    gameState.playerPokemon.attacks.slice(0, 3).forEach((attack, index) => {
        if (attackButtons[index]) {
            attackButtons[index].textContent = attack.name;
            attackButtons[index].onclick = () => useAttack(attack.name.toLowerCase().replace(/\s+/g, '-'));
        }
    });
}

function updateMessage(message) {
    document.getElementById('battle-message').textContent = message;
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏à‡∏°‡∏ï‡∏µ
function showAttackMenu() {
    if (gameState.battleEnded || gameState.currentTurn !== "player") return;

    playSound('click');
    document.getElementById('main-menu').style.display = 'none';
    document.getElementById('attack-menu').style.display = 'grid';
}

// ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏à‡∏°‡∏ï‡∏µ)
function goBack() {
    playSound('click');
    document.getElementById('attack-menu').style.display = 'none';
    document.getElementById('main-menu').style.display = 'grid';
}

// ‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≤‡πÇ‡∏à‡∏°‡∏ï‡∏µ (‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
function useAttack(attackName) {
    if (gameState.battleEnded || gameState.currentTurn !== "player") return;

    const attack = gameState.playerPokemon.attacks.find(a =>
        a.name.toLowerCase().replace(/\s+/g, '-') === attackName
    );

    if (!attack) return;

    playSound('click');
    // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    executeAttack(gameState.playerPokemon, gameState.enemyPokemon, attack);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏°‡∏î‡∏™‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (gameState.enemyPokemon.hp <= 0) {
        endBattle("win");
        return;
    }

    // ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π
    gameState.currentTurn = "enemy";
    setTimeout(enemyTurn, 1500);

    goBack();
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
function executeAttack(attacker, defender, attack) {
    updateMessage(`${attacker.name} ‡πÉ‡∏ä‡πâ ${attack.name}!`);

    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    playRandomBattleSound();

    if (attack.power === 0) {
        // ‡∏ó‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Status move)
        if (attack.effect === "lower-attack") {
            defender.attack = Math.max(1, Math.floor(defender.attack * 0.8));
            setTimeout(() => updateMessage(`${defender.name} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏•‡∏î‡∏•‡∏á!`), 1000);
        } else if (attack.effect === "lower-defense") {
            defender.defense = Math.max(1, Math.floor(defender.defense * 0.8));
            setTimeout(() => updateMessage(`${defender.name} ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏î‡∏•‡∏á!`), 1000);
        }
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
    const effectiveness = getTypeEffectiveness(attack.type, getDefenderType(defender));
    const damage = Math.floor(
        ((2 * 50 + 10) / 250) * (attacker.attack / defender.defense) * attack.power * effectiveness + 2
    );

    // ‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    defender.hp = Math.max(0, defender.hp - damage);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
    const target = defender === gameState.playerPokemon ? 'player' : 'enemy';
    const sprite = document.querySelector(`#${target}-sprite`);
    sprite.classList.add('damage-animation');
    setTimeout(() => sprite.classList.remove('damage-animation'), 500);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    setTimeout(() => {
        updateDisplay();
        let effectivenessText = "";
        if (effectiveness > 1) effectivenessText = " ‡∏°‡∏±‡∏ô‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å!";
        else if (effectiveness < 1) effectivenessText = " ‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û...";

        updateMessage(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ${damage} ‡πÅ‡∏ï‡πâ‡∏°!${effectivenessText}`);
    }, 500);
}

function getDefenderType(pokemon) {
    if (pokemon.name === "Pikachu") return "electric";
    if (pokemon.name === "Charmander") return "fire";
    if (pokemon.name === "Bulbasaur") return "grass";
    if (pokemon.name === "Squirtle") return "water";
    return "normal";
}

function getTypeEffectiveness(attackType, defenderType) {
    if (!typeChart[attackType] || !typeChart[attackType][defenderType]) {
        return 1;
    }
    return typeChart[attackType][defenderType];
}

function enemyTurn() {
    if (gameState.battleEnded) return;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    const randomAttack = gameState.enemyPokemon.attacks[Math.floor(Math.random() * gameState.enemyPokemon.attacks.length)];

    executeAttack(gameState.enemyPokemon, gameState.playerPokemon, randomAttack);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    setTimeout(() => {
        if (gameState.playerPokemon.hp <= 0) {
            endBattle("lose");
            return;
        }

        // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        gameState.currentTurn = "player";
        updateMessage("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!");
    }, 2000);
}

function endBattle(result) {
    gameState.battleEnded = true;

    if (result === "win") {
        playSound('win');
        updateMessage(`‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß! ${gameState.enemyPokemon.name} ‡∏´‡∏°‡∏î‡∏™‡∏†‡∏≤‡∏û!`);
    } else {
        playSound('lose');
        updateMessage(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ‡πÅ‡∏•‡πâ‡∏ß! ${gameState.playerPokemon.name} ‡∏´‡∏°‡∏î‡∏™‡∏†‡∏≤‡∏û!`);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
    setTimeout(() => {
        if (confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
            restartGame();
        }
    }, 2000);
}

function restartGame() {
    goBackToMenu();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
function switchPokemon() {
    if (gameState.battleEnded) return;
    playSound('click');
    updateMessage("‡πÑ‡∏°‡πà‡∏°‡∏µ Pokemon ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô!");
}

function useItem() {
    if (gameState.battleEnded) return;

    playSound('click');
    // ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    const healAmount = Math.min(20, gameState.playerPokemon.maxHp - gameState.playerPokemon.hp);
    if (healAmount > 0) {
        gameState.playerPokemon.hp += healAmount;
        updateDisplay();

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π
        const sprite = document.querySelector('#player-sprite');
        sprite.classList.add('heal-animation');
        setTimeout(() => sprite.classList.remove('heal-animation'), 1000);

        updateMessage(`${gameState.playerPokemon.name} ‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π ${healAmount} HP!`);

        // ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°
        gameState.currentTurn = "enemy";
        setTimeout(enemyTurn, 1500);
    } else {
        updateMessage(`${gameState.playerPokemon.name} ‡∏°‡∏µ HP ‡πÄ‡∏ï‡πá‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!`);
    }
}

function runAway() {
    if (gameState.battleEnded) return;

    playSound('click');
    if (Math.random() < 0.5) {
        updateMessage("‡∏´‡∏ô‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setTimeout(() => {
            goBackToMenu();
        }, 1500);
    } else {
        updateMessage("‡∏´‡∏ô‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        gameState.currentTurn = "enemy";
        setTimeout(enemyTurn, 1500);
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏°‡∏ô‡∏π
function initAudio() {
    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    setTimeout(() => {
        playMusic('menuMusic');
    }, 500);
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
window.addEventListener('load', () => {
    initAudio();
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
function showPokemonSelect() {
    playMusic('townMusic');
    document.getElementById('start-screen').style.display = 'none';
    document.getElementById('pokemon-select-screen').style.display = 'block';
}

function showInstructions() {
    playMusic('jumpMusic');
    document.getElementById('start-screen').style.display = 'none';
    document.getElementById('instructions-screen').style.display = 'block';
}

function goBackToStart() {
    playMusic('menuMusic');
    document.getElementById('pokemon-select-screen').style.display = 'none';
    document.getElementById('instructions-screen').style.display = 'none';
    document.getElementById('start-screen').style.display = 'flex';
}

function selectPokemon(pokemonKey) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Pok√©mon ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    gameState.playerPokemon = JSON.parse(JSON.stringify(pokemonData[pokemonKey]));

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Pok√©mon ‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
    const enemyOptions = Object.keys(pokemonData).filter(key => key !== pokemonKey);
    const randomEnemyKey = enemyOptions[Math.floor(Math.random() * enemyOptions.length)];
    gameState.enemyPokemon = JSON.parse(JSON.stringify(pokemonData[randomEnemyKey]));

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
    startBattle();
}

function startBattle() {
    playMusic('battleMusic');
    document.getElementById('pokemon-select-screen').style.display = 'none';
    document.getElementById('game-container').style.display = 'flex';

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
    gameState.currentTurn = "player";
    gameState.battleEnded = false;

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
    initGame();
}

function goBackToMenu() {
    playMusic('menuMusic');
    document.getElementById('game-container').style.display = 'none';
    document.getElementById('start-screen').style.display = 'flex';

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    goBack();
}